#+TITLE: lec-05: creating 1st Spring application

Steps to create 1st Spring application:

* 1. Create a Java class - ~Restaruant~;
  #+NAME: Restaurant.java
  #+BEGIN_SRC java
package org.gontuseries.springcore;

public class Restaurant {
	public void greetCustomer() {
		System.out.println("welcome to our restaurant");
	}
}
  #+END_SRC
* 2. Create a Spring configuration file - ~SpringConfig.xml~

   Spring Framework will read this XML file for managing all Java objects, our
   classes in Java project.

In Spring Framework, every ~object~ is called a ~Bean~. So do not think Bean is
something new, it's a Spring way of calling Java *object*.

We have to *provide a name( ~id=""~ ) to every Bean( ~class=""~ )*,

#+NAME: SpringConfig.xml
#+BEGIN_SRC xml
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

  <bean id="restaruantBean" class="org.gontuseries.springcore.Restaruant">
  </bean>
</beans>
#+END_SRC

* 3. Write a test class

#+NAME: TestSpringProject.java
#+BEGIN_SRC java
package org.gontuseries.springcore;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestSpringProject {

    public static void main(String[] args){

        /**
         * This statement is going to find and load SpringConfig.xml file
         from our project into the application context;
         */
        ApplicationContext context =
            new ClassPathXmlApplicationContext("SpringConfig.xml");

        Restaruant restaruantObj = (Restaruant) context.getBean("restaruantBean");

        restaruantObj.greetCustomer();

    }
}
#+END_SRC

#+BEGIN_EXAMPLE
ApplicationContext context =
   new ClassPathXmlApplicationContext("SpringConfig.xml");
#+END_EXAMPLE


*What is a ~ApplicationContext~.*

It's simply an *interface* provided by Spring people which *reads the
configuration* of your project from XML file and then by *calling* different
methods of it, you access different functionalities provided by Spring
framework, like dependency injection concept, aspect-oriented programming etc,
and are in simple words without any complexity.

This is the basic interface provided to you to access string framework.

#+BEGIN_EXAMPLE
Restaurant restaruantObj = (Restaurant) context.getBean("restaruantBean");
#+END_EXAMPLE

Here we are calling ~getBean("beanName")~ method of application context
interface, just to request spring framework to *create and return* an object
with a bean name "restaruantBean".

Here Spring framework will *search for* this bean in the configuration file and
will *implicitly* *create* and *return* an object for class with a bean name
"~restaruantBean~".


#+BEGIN_EXAMPLE
restaruantObj.greetCustomer();
#+END_EXAMPLE

just call the ~greetCustomer()~ method of freshman bean or restaruantObj to
print "welcome" note on the console.


The whole project is just a brief overview of application context, there is one
more interface called "~BeanFactory~" provided by Spring people for the same
purpose. Application context does everything which in fact it does plus some
motifs.
